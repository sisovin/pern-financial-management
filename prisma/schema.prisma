// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  username        String      @unique
  email           String      @unique
  password        String      /// @encrypted
  roles           Role[]      @relation("UserRoles")
  userData        UserData?
  adminData       AdminData?
  transactions    Transaction[]
  savingGoals     SavingGoal[]
  passwordReset   PasswordReset?
  emailVerification EmailVerification?
  auditLogs       AuditLog[]
  twoFactorEnabled Boolean     @default(false)
  twoFactorSecret  String?
  isDeleted       Boolean     @default(false)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([email])
  @@map("users")
}

model UserData {
  id        String    @id @default(uuid())
  userId    String    @unique
  firstName String
  lastName  String
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  isDeleted Boolean   @default(false)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_data")
}

model AdminData {
  id        String    @id @default(uuid())
  userId    String    @unique
  firstName String
  lastName  String
  phone     String
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  isDeleted Boolean   @default(false)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("admin_data")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  permissions Permission[] @relation("RolePermissions")
  isDeleted   Boolean      @default(false)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]       @relation("UserRoles")
  
  @@map("roles")
}

model Permission {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  roles       Role[]    @relation("RolePermissions")
  isDeleted   Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("permissions")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expires   DateTime
  createdAt DateTime @default(now())  
  updatedAt DateTime    @updatedAt 
  user      User     @relation(fields: [userId], references: [id])

  @@map("password_resets")
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt   DateTime    @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  @@map("email_verifications")
}

model Transaction {
  id          String      @id @default(uuid())
  userId      String
  amount      Decimal
  description String?
  date        DateTime    @default(now())
  categories  Category[]
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@map("transactions")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  type         TransactionType
  description  String?
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  
  @@unique([name, type])
  @@map("categories")
}

model SavingGoal {
  id            String     @id @default(uuid())
  userId        String
  name          String
  description   String?
  targetAmount  Decimal
  currentAmount Decimal    @default(0)
  deadline      DateTime
  isAchieved    Boolean    @default(false)
  isDeleted     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  user          User       @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@map("saving_goals")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  INVESTMENT
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   Json?
  ipAddress String?
  timestamp DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}